from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from pydantic import BaseModel
from typing import List

from db import get_session
from models import Dataset, DatasetSettings

router = APIRouter(prefix="/datasets", tags=["Datasets"])

# üß± –°—Ö–µ–º—ã
class CreateDatasetRequest(BaseModel):
    name: str
    description: str

class RecommendationResponse(BaseModel):
    meta_fields: List[dict]
    recommended_chunk_size: int
    recommended_chunk_overlap: int

class UpdateSettingsRequest(BaseModel):
    chunk_size: int
    chunk_overlap: int
    summary_prompt: str
    gpt_model: str
    metadata_targets: dict

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
@router.post("/")
async def create_dataset(data: CreateDatasetRequest, session: AsyncSession = Depends(get_session)):
    dataset = Dataset(
        name=data.name,
        description=data.description,
        user_id=1  # ‚ö†Ô∏è –ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
    )
    session.add(dataset)
    await session.flush()
    await session.commit()
    return {"id": dataset.id}

# üí° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@router.get("/{dataset_id}/recommendations", response_model=RecommendationResponse)
async def get_recommendations(dataset_id: int, session: AsyncSession = Depends(get_session)):
    # ‚öôÔ∏è –ó–∞–≥–ª—É—à–∫–∞. –ü–æ–∑–∂–µ –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ OpenAI —Å –ø—Ä–æ–º—Ç–æ–º.
    return RecommendationResponse(
        meta_fields=[
            {"name": "—Ç–µ–º–∞", "prompt": "–û–ø—Ä–µ–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—É—é —Ç–µ–º—É —ç—Ç–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞."},
            {"name": "—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "prompt": "–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞."}
        ],
        recommended_chunk_size=600,
        recommended_chunk_overlap=100
    )

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.post("/{dataset_id}/settings")
async def update_settings(dataset_id: int, data: UpdateSettingsRequest, session: AsyncSession = Depends(get_session)):
    result = await session.execute(select(DatasetSettings).where(DatasetSettings.dataset_id == dataset_id))
    settings = result.scalar_one_or_none()

    if settings:
        settings.chunk_size = data.chunk_size
        settings.chunk_overlap = data.chunk_overlap
        settings.summary_prompt = data.summary_prompt
        settings.metadata_targets = data.metadata_targets
        settings.gpt_model = data.gpt_model
    else:
        settings = DatasetSettings(
            dataset_id=dataset_id,
            chunk_size=data.chunk_size,
            chunk_overlap=data.chunk_overlap,
            summary_prompt=data.summary_prompt,
            metadata_targets=data.metadata_targets,
            gpt_model=data.gpt_model
        )
        session.add(settings)

    await session.commit()
    return {"status": "ok"}
