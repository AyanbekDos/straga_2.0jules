from pgvector.sqlalchemy import Vector

"""create core tables

Revision ID: e730dbe410d9
Revises: 
Create Date: 2025-05-12 00:34:22.021580

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e730dbe410d9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('datasets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('state', sa.String(length=50), server_default='new', nullable=True),
    sa.Column('embedding_settings', sa.JSON(), server_default='{}', nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('links',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('dataset_id', sa.Integer(), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('status', sa.String(length=30), server_default='queued', nullable=True),
    sa.Column('html_path', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chunks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('dataset_id', sa.Integer(), nullable=False),
    sa.Column('link_id', sa.Integer(), nullable=True),
    sa.Column('chunk_index', sa.Integer(), nullable=True),
    sa.Column('chunk_text', sa.Text(), nullable=True),
    sa.Column('clean_author', sa.String(), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('influence_method', sa.Text(), nullable=True),
    sa.Column('quality', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ),
    sa.ForeignKeyConstraint(['link_id'], ['links.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('embeddings',
    sa.Column('chunk_id', sa.Integer(), nullable=False),
    sa.Column('input', sa.Text(), nullable=True),
    sa.Column('vector', Vector(1536), nullable=True),
    sa.ForeignKeyConstraint(['chunk_id'], ['chunks.id'], ),
    sa.PrimaryKeyConstraint('chunk_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('embeddings')
    op.drop_table('chunks')
    op.drop_table('links')
    op.drop_table('datasets')
    op.drop_table('users')
    # ### end Alembic commands ###
